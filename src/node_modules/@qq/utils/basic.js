import path from 'path'
import { red, yellow } from 'ansi-colors'

const folders = {}
folders.root = process.cwd()
folders.git = path.join(folders.root, '/.git/')
folders.synq = path.join(folders.root, '/__synq__/')
folders.db = path.join(folders.synq, '/databases/')

const files = {}
files.ignore = path.join(folders.synq, '/.gitignore')
// FIXME: SETPATH FROM CLI
files.config = path.join(folders.synq, '/config.json')
files.working = path.join(folders.synq, '/WORKING')

export { folders, files }


import util from 'util'
import child from 'child_process'
export const exec = util.promisify(child.exec)


export const out = (chunk, cb) => process.stdout.write(chunk, 'utf8', cb)
export const log = {
	out(output, silent) {
		if (!silent) {
			console.log(output)
		}
	},
	error(error, log_all) {
		if (log_all) {
			console.error(red('Fatal:'), 'unexpected, unknown, or unhandled Synq error.')
			console.log()
			console.log(yellow(' =================== Synq is in Alpha ==================='))
			console.log()
			console.log('  Please file an issue with as much detail as possible:')
			console.log('  [FIXME: include link here.]')
			console.log()
			console.log('  Displaying full error stack for feedback:')
			console.log()
			console.error(error)
			console.log()
			console.log(yellow(' ========================================================'))
			console.log()
		} else {
			console.error(red('Fatal:'), typeof error === 'string' ? error : error.message)
		}
	},
	warn(error, log_all) {
		if (log_all) {
			console.error(yellow('Warning:'), 'unexpected, unknown, or unhandled Synq error.')
			console.log()
			console.log(yellow(' =================== Synq is in Alpha ==================='))
			console.log()
			console.log('  Please file an issue with as much detail as possible:')
			console.log('  [FIXME: include link here.]')
			console.log()
			console.log('  Displaying full error stack for feedback:')
			console.log()
			console.error(error)
			console.log()
			console.log(yellow(' ========================================================'))
			console.log()
		} else {
			console.error(yellow('Warning:'), typeof error === 'string' ? error : error.message)
		}
	},
}

import readline from 'readline'
export const cli_query = query => {
	const rl = readline.createInterface({
		input: process.stdin,
		output: process.stdout,
	})

	return new Promise(resolve => {
		return rl.question(query, answer => {
			rl.close()
			resolve(answer)
		})
	})
}
