import os from 'os'
import fs from 'fs-extra'
import { readconfig, writeconfig } from '@qq/utils/config.js'
import { folders, log, cli_query } from '@qq/utils/basic.js'
import { create_schema } from '@qq/utils/schema.js'

export const db_create = async function(name, schema, opts) {
	const config = await readconfig(opts)
	config.databases = config.databases || {}
	if (config.databases[name]) {
		log.error(`database "${name}" already defined.`)
	} else {
		config.databases[name] = {}
		// TODO: limit schema to json or csv ??? SHOULD THERE EVEN BE A TYPE, OR IS IT ALL JUST JSON!!!????
		config.databases[name].schema = schema ? schema : 'json-schema'
		await writeconfig(config)

		const files = {
			'database.json': '[]' + os.EOL,
			'schema.json': create_schema(name),
			'README.md': `# ${name} database\n\nDocument your database here.${os.EOL}`,
		}

		for (let filename in files) {
			const fullfile = `${folders.db}${name}/${filename}`
			if (fs.existsSync(fullfile)) {
				log.warn(`"${name}/${filename}" database file already exists. Leaving as is.`)
			} else {
				log.out(`Created "${name}/${filename}" database file.`, opts.silent)
				await fs.ensureDir(folders.db + name)
				await fs.writeFile(fullfile, files[filename])
			}
		}
	}
}

export default function(prog) {

	prog
		.command('db')
		.describe('Manage a set of local databases')
		.option('-l, --list', 'List databases')
		.action(async(opts) => {
			if (opts.list) {
				const { databases } = await readconfig(opts)
				if (databases) {
					console.log('Databases:')
					for (let key in databases) {
						console.log(`${key} | schema: ${databases[key].schema}`)
					}
				} else {
					console.log('No databases.')
				}
			}
		})

	prog
		.command('db create <name> [schema]', 'Create a local database')
		.action(async(name, schema, opts) => {
			try {
				await db_create(name, schema, opts)
			} catch (error) {
				log.error(error, true)
			}
		})

	prog
		.command('db destroy <name>', 'Destroy a local database')
		.option('--skip-query', 'Skip user query (y/n)')
		.action(async(name, opts) => {

			let proceed = true
			if (!opts['skip-query']) {
				let query = 'THIS IS A DESTRUCTIVE ACTION.\n'
				query += `Are you sure you want to delete database "${name}"? (y/n) (default: n) `
				const answer = await cli_query(query)
				proceed = answer === 'yes' || answer === 'y'
			}

			if (proceed) {
				try {
					const config = await readconfig(opts)
					delete config.databases[name]
					await writeconfig(config)
					await fs.remove(`${folders.db}${name}`)
					console.log(`Database "${name}" destroyed.`)
				} catch (error) {
					log.error(error, true)
				}
			} else {
				console.log('No action taken.')
			}

		})

}
