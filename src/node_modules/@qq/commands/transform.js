import fs from 'fs-extra'
import { readconfig, readworking } from '@qq/utils/config.js'
import { folders, log } from '@qq/utils/basic.js'
import { create_transform } from '@qq/utils/transform.js'

export default function(prog) {

	prog
		.command('transform')
		.describe('Manage a set of API transforms against data')
		.option('-l, --list', 'List transforms.')
		.action(async(opts) => {
			if (opts.list) {
				const working = await readworking()
				const { databases } = await readconfig(opts)
				if (!working || !databases || !databases[working]) { throw new Error('No working database.') }

				const { transforms } = databases[working]
				if (transforms) {
					console.log('Remotes:')
					for (let key in transforms) {
						console.log(`${key} | ${transforms[key].url}`)
					}
				} else {
					console.log('No transforms.')
				}
			}
		})

	prog
		.command('transform create <name>', 'Create a API transform template')
		.action(async(name, opts) => {
			try {
				const working = await readworking()
				if (!working) { throw new Error('No working database.') }

				const transforms_dir = `${folders.db}${working}/transforms/`
				await fs.ensureDir(transforms_dir)

				const fullfile = `${transforms_dir}${name}.js`

				if (fs.existsSync(fullfile)) {
					log.warn(`"${name}" transform file already exists. Leaving as is.`)
				} else {
					log.out(`Created "${name}.js" transform file.`, opts.silent)
					await fs.writeFile(fullfile, create_transform())
				}
			} catch (error) {
				log.error(error.message)
			}
		})

}
