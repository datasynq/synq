import os from 'os'
import fs from 'fs-extra'
import { folders, files, exec, out, log } from '@qq/utils/basic.js'
import { git_commit } from '@qq/utils/git.js'
import { select_db } from './select.js'
import { db_create } from './db.js'

export default function(prog) {

	prog
		.command('init')
		.describe('Initializes basic Synq database')
		.option('-n, --name', 'Name of default database')
		.option('-b, --bare', 'Skip creating default database (overrides -n, --name)')
		.option('-x, --x-git', 'Do not use git for version control')
		.action(async opts => {
			try {

				const use_git = !opts['x-git']

				if (use_git) {
					if (fs.existsSync(folders.git)) {
						log.out('Existing Git repository. Keeping intact.', opts.silent)
					} else {
						const { stdout } = await exec('git init')
						if (stdout) { out(stdout) }
					}
				}

				if (fs.existsSync(folders.synq)) {
					log.out('Existing Synq repository. Keeping intact.', opts.silent)
				} else {
					await fs.ensureDir(folders.db)
					await fs.writeFile(files.config, `{ "git": ${use_git} }${os.EOL}`)
					// NOTE: still writing the following, even if not git versionining, for safety
					// TODO: document this in the README.md
					await fs.writeFile(files.ignore, `/WORKING${os.EOL}`)

					if (opts['bare']) {

						await fs.close(await fs.open(files.working, 'w'))
						if (use_git) {
							git_commit([
								'./__synq__/.gitignore',
								'./__synq__/config.json',
							], 'Initialized bare Synq config')
						}
						log.out(`Initialized bare Synq scaffolding and config in ${folders.synq}`, opts.silent)

					} else {

						const db_name = opts.name || 'main'
						await db_create(db_name, null, Object.assign({ silent: true }, opts))
						await select_db(db_name, Object.assign({ silent: true }, opts))

						if (use_git) {
							git_commit([
								'./__synq__/.gitignore',
								'./__synq__/config.json',
								`./__synq__/databases/${db_name}/database.json`,
								`./__synq__/databases/${db_name}/README.md`,
								`./__synq__/databases/${db_name}/schema.json`,
							], `Synq database ${db_name}`)
						}
						log.out(`Initialized Synq database "${db_name}" in ${folders.synq}`, opts.silent)

					}

				}

			} catch (error) {
				log.error(error.message)
			}
		})

}
