import { readconfig, writeconfig, readworking } from '@qq/utils/config.js'
import { log } from '@qq/utils/basic.js'

export default function(prog) {

	prog
		.command('remote')
		.describe('Manage a set of API or database endpoint "remotes"')
		.option('-l, --list', 'List remotes.')
		.action(async(opts) => {
			if (opts.list) {
				const working = await readworking()
				const { databases } = await readconfig(opts)
				if (!working || !databases || !databases[working]) { throw new Error('No working database.') }

				const { remotes } = databases[working]
				if (remotes) {
					console.log('Remotes:')
					for (let key in remotes) {
						console.log(`${key} | ${remotes[key].url}`)
					}
				} else {
					console.log('No remotes.')
				}
			}
		})

	prog
		.command('remote add <name> <url>', 'Add a remote API or database endpoint')
		.action(async(name, url, opts) => {
			try {
				const working = await readworking()
				if (!working) { throw new Error('No working database.') }

				const config = await readconfig(opts)
				config.databases[working].remotes = config.databases[working].remotes || {}
				config.databases[working].remotes[name] = config.databases[working].remotes[name] || {}
				// TODO: sanitize and normalize url (can be database or http(s) endpoint)
				config.databases[working].remotes[name].url = url
				// TODO: make encryption the default???
				config.databases[working].remotes[name].encrypted = false
				await writeconfig(config)
			} catch (error) {
				log.error(error.message)
			}
		})

	prog
		.command('remote rename <old_name> <new_name>', 'Rename a remote API or database endpoint')
		.action(async(old_name, new_name, opts) => {
			try {
				const working = await readworking()
				if (!working) { throw new Error('No working database.') }

				const config = await readconfig(opts)
				config.databases[working].remotes = config.databases[working].remotes || {}
				if (config.databases[working].remotes[old_name]) {
					config.databases[working].remotes[new_name] = config.databases[working].remotes[old_name]
					delete config.databases[working].remotes[old_name]
				} else {
					log.warn(`Remote "${new_name}" does not exist.`)
				}
				await writeconfig(config)
			} catch (error) {
				log.error(error.message)
			}
		})

	prog
		.command('remote remove <name>', 'Remove a remote API or database endpoint')
		.action(async(name, opts) => {
			try {
				const working = await readworking()
				if (!working) { throw new Error('No working database.') }

				const config = await readconfig(opts)
				config.databases[working].remotes = config.databases[working].remotes || {}
				if (config.databases[working].remotes[name]) {
					delete config.databases[working].remotes[name]
					await writeconfig(config)
				}
			} catch (error) {
				log.error(error.message)
			}
		})

}
